// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package msg

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ClientLogoutResp struct {
	_tab flatbuffers.Table
}

func GetRootAsClientLogoutResp(buf []byte, offset flatbuffers.UOffsetT) *ClientLogoutResp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ClientLogoutResp{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsClientLogoutResp(buf []byte, offset flatbuffers.UOffsetT) *ClientLogoutResp {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ClientLogoutResp{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ClientLogoutResp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ClientLogoutResp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ClientLogoutResp) UserId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClientLogoutResp) MutateUserId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *ClientLogoutResp) Id() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ClientLogoutResp) MutateId(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func ClientLogoutRespStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ClientLogoutRespAddUserId(builder *flatbuffers.Builder, userId uint64) {
	builder.PrependUint64Slot(0, userId, 0)
}
func ClientLogoutRespAddId(builder *flatbuffers.Builder, id uint32) {
	builder.PrependUint32Slot(1, id, 0)
}
func ClientLogoutRespEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
